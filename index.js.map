{"version":3,"file":"index.js","sources":["../src/main.js","../src/js/script.js"],"sourcesContent":["// Funkcja do dynamicznego ładowania plików HTML\nasync function loadPartials() {\n  // Pobierz wszystkie elementy z atrybutem data-load\n  const loadElements = document.querySelectorAll('[data-load]');\n\n  for (const element of loadElements) {\n    const src = element.getAttribute('src');\n    if (!src) continue;\n\n    try {\n      const response = await fetch(src);\n      if (!response.ok) {\n        console.error(`Nie udało się załadować ${src}: ${response.status}`);\n        element.innerHTML = `<p>Błąd ładowania: ${src}</p>`;\n        continue;\n      }\n\n      const content = await response.text();\n      element.innerHTML = content;\n\n      // Opcjonalnie: obsługa dynamicznych ścieżek, np. data-icon-path\n      const iconPath = element.getAttribute('data-icon-path');\n      if (iconPath) {\n        const icon = element.querySelector('[data-icon]');\n        if (icon) icon.setAttribute('src', iconPath);\n      }\n    } catch (error) {\n      console.error(`Błąd ładowania ${src}:`, error);\n      element.innerHTML = `<p>Błąd ładowania: ${src}</p>`;\n    }\n  }\n}\n\n// Wywołaj funkcję po załadowaniu DOM\ndocument.addEventListener('DOMContentLoaded', loadPartials);\n","document.getElementById('upload-form')\n  .addEventListener('submit', async event => {\n    event.preventDefault();\n\n    const fileInput = document.getElementById('file-input');\n    const fileNameInput = document.getElementById('file-name');\n    if (!fileInput.files.length) {\n      alert('Proszę wybrać zdjęcia!');\n      return;\n    }\n\n    const formData = new FormData();\n    Array.from(fileInput.files).forEach(file =>\n      formData.append('images', file)\n    );\n\n    // Dodaj nazwę pliku do formData\n    formData.append('newName', fileNameInput.value);\n\n    try {\n      const response = await fetch('http://localhost:3000/upload', {\n        // Zmiana URL na właściwy backend\n        method: 'POST',\n        body: formData,\n      });\n\n      if (response.ok) {\n        const blob = await response.blob();\n        const downloadLink = document.getElementById('download-link');\n        downloadLink.href = URL.createObjectURL(blob);\n        downloadLink.style.display = 'inline-block';\n        downloadLink.textContent = 'Pobierz spakowane zdjęcia';\n        downloadLink.download = 'cropped_images.zip';\n      } else {\n        alert('Wystąpił błąd podczas przetwarzania zdjęć.');\n      }\n    } catch (error) {\n      console.error('Błąd:', error);\n      alert('Nie udało się połączyć z serwerem.');\n    }\n  });\n"],"names":["loadPartials","loadElements","element","src","response","content","iconPath","icon","error","event","fileInput","fileNameInput","formData","file","blob","downloadLink"],"mappings":"0uBACA,eAAeA,GAAe,CAE5B,MAAMC,EAAe,SAAS,iBAAiB,aAAa,EAE5D,UAAWC,KAAWD,EAAc,CAClC,MAAME,EAAMD,EAAQ,aAAa,KAAK,EACtC,GAAKC,EAEL,GAAI,CACF,MAAMC,EAAW,MAAM,MAAMD,CAAG,EAChC,GAAI,CAACC,EAAS,GAAI,CAChB,QAAQ,MAAM,2BAA2BD,CAAG,KAAKC,EAAS,MAAM,EAAE,EAClEF,EAAQ,UAAY,sBAAsBC,CAAG,OAC7C,QACR,CAEM,MAAME,EAAU,MAAMD,EAAS,KAAM,EACrCF,EAAQ,UAAYG,EAGpB,MAAMC,EAAWJ,EAAQ,aAAa,gBAAgB,EACtD,GAAII,EAAU,CACZ,MAAMC,EAAOL,EAAQ,cAAc,aAAa,EAC5CK,GAAMA,EAAK,aAAa,MAAOD,CAAQ,CACnD,CACK,OAAQE,EAAO,CACd,QAAQ,MAAM,kBAAkBL,CAAG,IAAKK,CAAK,EAC7CN,EAAQ,UAAY,sBAAsBC,CAAG,MACnD,CACA,CACA,CAGA,SAAS,iBAAiB,mBAAoBH,CAAY,EClC1D,SAAS,eAAe,aAAa,EAClC,iBAAiB,SAAU,MAAMS,GAAS,CACzCA,EAAM,eAAgB,EAEtB,MAAMC,EAAY,SAAS,eAAe,YAAY,EAChDC,EAAgB,SAAS,eAAe,WAAW,EACzD,GAAI,CAACD,EAAU,MAAM,OAAQ,CAC3B,MAAM,wBAAwB,EAC9B,MACN,CAEI,MAAME,EAAW,IAAI,SACrB,MAAM,KAAKF,EAAU,KAAK,EAAE,QAAQG,GAClCD,EAAS,OAAO,SAAUC,CAAI,CAC/B,EAGDD,EAAS,OAAO,UAAWD,EAAc,KAAK,EAE9C,GAAI,CACF,MAAMP,EAAW,MAAM,MAAM,+BAAgC,CAE3D,OAAQ,OACR,KAAMQ,CACd,CAAO,EAED,GAAIR,EAAS,GAAI,CACf,MAAMU,EAAO,MAAMV,EAAS,KAAM,EAC5BW,EAAe,SAAS,eAAe,eAAe,EAC5DA,EAAa,KAAO,IAAI,gBAAgBD,CAAI,EAC5CC,EAAa,MAAM,QAAU,eAC7BA,EAAa,YAAc,4BAC3BA,EAAa,SAAW,oBAChC,MACQ,MAAM,4CAA4C,CAErD,OAAQP,EAAO,CACd,QAAQ,MAAM,QAASA,CAAK,EAC5B,MAAM,oCAAoC,CAChD,CACA,CAAG"}